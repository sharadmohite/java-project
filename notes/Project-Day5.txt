step39:
------
	Create update button inside "EmployeeListComponent.js" file.

EmployeeListComponent.js 
-------------------------

import { useState, useEffect } from "react";
import { useTypewriter,Cursor} from 'react-simple-typewriter'
import {Link} from 'react-router-dom';
import EmployeeService from "../services/EmployeeService";

function EmployeeListComponent()
{
    
    const [employees,setEmployees]=useState([]);

    const [text] = useTypewriter({
        words:["Details","Info","List"],
        loop:true,
        typeSpeed:120,
        deleteSpeed:80
    })


    useEffect((e)=>{
        EmployeeService.getAllEmployees().then(res=>{
            setEmployees(res.data);
        })
    },[])
    
    return(
         <div className="container mt-5">
            <h4 className="text-center"> Employee {text}<Cursor/> </h4>
            <div className="row mt-5">
        <Link to="/add-emp" className="btn btn-warning w-25 mb-2"> Add Employee </Link>            
                <table className="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Name</th>
                            <th>DOJ</th>
                            <th>Department</th>
                            <th>Designation</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            employees.map(employee =>{
                                return <tr key={employee.id}>
                                            <td>{employee.id}</td>
                                            <td>{employee.name}</td>
                                            <td>{employee.doj}</td>
                                            <td>{employee.dept.deptName}</td>
                                            <td>{employee.dept.designation}</td>
                                            <td>
    <Link to={`/update-emp/${employee.id}`} className="btn btn-secondary"> update </Link>                                        
                                            </td>
                                        </tr>
                            })
                        }
                    </tbody>
                </table>
            </div>
         </div>   
    )
}
export default EmployeeListComponent;

step40:
------
	Create a  UpdateEmployeeComponent.js file inside "components" folder.

UpdateEmployeeComponent.js 
---------------------------
function UpdateEmployeeComponent()
{
    return (
        <h1> Update Employee Component </h1>
    )
}
export default UpdateEmployeeComponent;

step41:
------
	Add the routing to UpdateEmployeeComponent inside routing file.

App.js 
-------
import EmployeeListComponent from "./components/EmployeeListComponent";
import FooterComponent from "./components/FooterComponent";
import HeaderComponent from "./components/HeaderComponent";
import './App.css';
import {BrowserRouter,Routes,Route} from 'react-router-dom';
import CreateEmployeeComponent from "./components/CreateEmployeeComponent";
import UpdateEmployeeComponent from "./components/UpdateEmployeeComponent";

function App()
{
  return (
      <div className="bg-color">
          <HeaderComponent/>

          <BrowserRouter>
             <div className="container mt-5">
              <Routes>
                  <Route exact path="/" element={<EmployeeListComponent/>}></Route>
                  <Route path="/employees" element={<EmployeeListComponent/>}></Route>
                  <Route path="/add-emp" element={<CreateEmployeeComponent/>}></Route>
                  <Route path="/update-emp/:id" element={<UpdateEmployeeComponent/>}></Route>
              </Routes>
              </div> 
          </BrowserRouter>
          
          <FooterComponent/>
      </div>
  )
}
export default App;

step42:
-------
	Add get mapping logic inside EmployeeService.java file.

EmployeeService.java
--------------------
package com.ihub.www.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ihub.www.exception.ResourceNotFoundException;
import com.ihub.www.model.Employee;
import com.ihub.www.repo.EmployeeRepository;

@Service
public class EmployeeService 
{
	@Autowired
	EmployeeRepository employeeRepository;
	
	public Employee addEmployee(Employee employee)
	{
		return employeeRepository.save(employee);
	}
	
	public List<Employee> getAllEmployees()
	{
		return employeeRepository.findAll();
	}
	
	public Employee getEmployeeById(long id)
	{
		return employeeRepository.findById(id).orElseThrow(()-> new ResourceNotFoundException("Id Not Found"));
	}
}

step43:
------
	Call the get mapping method of EmployeeService.java file from EmployeeController.java.

EmployeeController.java
-----------------------
package com.ihub.www.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ihub.www.model.Employee;
import com.ihub.www.service.EmployeeService;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/api/v1/")
public class EmployeeController 
{
	@Autowired
	EmployeeService employeeService;
	
	@PostMapping("/employees")
	public Employee addEmployee(@RequestBody Employee employee)
	{
		return employeeService.addEmployee(employee);
	}
	
	@GetMapping("/employees")
	public List<Employee> getAllEmployees()
	{
		return employeeService.getAllEmployees();
	}
	
	@GetMapping("/employees/{id}")
	public Employee getEmployeeById(@PathVariable long id)
	{
		return employeeService.getEmployeeById(id);
	}
}

step44:
-----
	Create a put mapping logic inside EmployeeService.java file.

EmployeeService.java
--------------------
package com.ihub.www.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.ihub.www.exception.ResourceNotFoundException;
import com.ihub.www.model.Employee;
import com.ihub.www.repo.EmployeeRepository;

@Service
public class EmployeeService 
{
	@Autowired
	EmployeeRepository employeeRepository;
	
	public Employee addEmployee(Employee employee)
	{
		return employeeRepository.save(employee);
	}
	
	public List<Employee> getAllEmployees()
	{
		return employeeRepository.findAll();
	}
	
	public Employee getEmployeeById(long id)
	{
		return employeeRepository.findById(id).orElseThrow(()-> new ResourceNotFoundException("Id Not Found"));
	}
	
	public ResponseEntity<Employee> updateEmployee(long id,Employee employee)
	{
		if(employeeRepository.existsById(id))
		{
			Employee existingEmp = employeeRepository.findById(id).get();
			existingEmp.setName(employee.getName());
			existingEmp.setDoj(employee.getDoj());
			existingEmp.setDept(employee.getDept());
			
			employeeRepository.save(existingEmp);
			
			return new ResponseEntity<>(existingEmp,HttpStatus.OK);
		}
		else
		{
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}
}

step45:
------
	Call update mapping method of EmployeeService.java file from EmployeeController.java.

EmployeeController.java
-----------------------
package com.ihub.www.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ihub.www.model.Employee;
import com.ihub.www.service.EmployeeService;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/api/v1/")
public class EmployeeController 
{
	@Autowired
	EmployeeService employeeService;
	
	@PostMapping("/employees")
	public Employee addEmployee(@RequestBody Employee employee)
	{
		return employeeService.addEmployee(employee);
	}
	
	@GetMapping("/employees")
	public List<Employee> getAllEmployees()
	{
		return employeeService.getAllEmployees();
	}
	
	@GetMapping("/employees/{id}")
	public Employee getEmployeeById(@PathVariable long id)
	{
		return employeeService.getEmployeeById(id);
	}
	
	@PutMapping("/employees/{id}")
	public ResponseEntity<Employee> updateEmployee(@PathVariable long id, @RequestBody Employee employee)
	{
		return employeeService.updateEmployee(id, employee);
	}
}

step46:
-------
	Add GET and PUT methods inside EmployeeService.js file.

EmployeeService.js 
----------------

import axios from 'axios';
const EMPLOYEE_API="http://localhost:9191/api/v1/employees";

class EmployeeService
{
    addEmployee(employee)
    {
        return axios.post(EMPLOYEE_API,employee);
    }

    getAllEmployees()
    {
        return axios.get(EMPLOYEE_API);
    }

    getEmployeeById(employeeId)
    {
        return axios.get(EMPLOYEE_API+'/'+employeeId);
    }

    updateEmployee(employeeId,employee)
    {
        return axios.put(EMPLOYEE_API+'/'+employeeId,employee);
    }
}
export default new EmployeeService();

step47:
-------
	Create a form for UpdateEmployeeComponent.js file.

UpdateEmployeeComponent.js 
--------------------------
import { useState,useEffect } from "react";
import { useNavigate,useParams } from "react-router-dom";
import EmployeeService from "../services/EmployeeService";

function UpdateEmployeeComponent()
{
    let navigate = useNavigate();

    const [name,setName]=useState("");
    const [doj,setDoj]=useState("");
    const [department,setDepartment]=useState({deptName:"",designation:""})
    const {id}=useParams();

    const handleCancel=(e)=>{
        e.preventDefault();
        navigate("/employees");
    }

    useEffect((e)=>{
        
        EmployeeService.getEmployeeById(id).then(res=>{
            setName(res.data.name);
            setDoj(res.data.doj);
            setDepartment({
                deptName: res.data.dept.deptName,
                designation:res.data.dept.designation
            })
        })
        
    },[])

    const handleSubmit=(e)=>{
        e.preventDefault();

        const updatedEmployee={
            name,
            doj,
            dept:{
                deptName:department.deptName,
                designation:department.designation
            }
        }

        EmployeeService.updateEmployee(id,updatedEmployee).then(res=>{
            navigate("/employees");
        })
    }


    return (
        <div className="card col-md-6 offset-3">
            <h5 className="text-center pt-3">Update Employee</h5>
            <div className="card-body">
                <form>
                    <label className="my-2">Name:</label>
                    <input type="text" name="name" id="name" className="form-control" autoComplete="off"
                    value={name}
                    onChange={(e)=>setName(e.target.value)}/>

                    <label className="my-2">DOJ:</label>
                    <input type="text" name="doj" id="doj" className="form-control" autoComplete="off"
                    value={doj}
                    onChange={(e)=>setDoj(e.target.value)}/>

                    <label className="my-2">Department:</label>
                    <input type="text" name="deptName" id="deptName" className="form-control" autoComplete="off"
                    value={department.deptName}
                    onChange={(e)=>setDepartment({...department,deptName:e.target.value})}/>

                    <label className="my-2">Designation:</label>
                    <input type="text" name="designation" id="designation" className="form-control" autoComplete="off"
                    value={department.designation}
                    onChange={(e)=>setDepartment({...department,designation:e.target.value})}/>
                    
                    <button className="btn btn-danger mt-3" onClick={handleCancel}> cancel</button>
                    <button className="btn btn-success mt-3 float-end" onClick={handleSubmit}> submit </button>
                </form>
            </div>
        </div>
    )
}
export default UpdateEmployeeComponent;




































































































































