step20:
-------
	Create a EmployeeRepository inside "com.ihub.www.repo" package.

EmployeeRepository.java
----------------------
package com.ihub.www.repo;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import com.ihub.www.model.Employee;

@Repository
public interface EmployeeRepository extends JpaRepository<Employee, Long>
{

}


step21:
------
	Create a DepartmentRepository inside "com.ihub.www.repo" package.

DepartmentRepository.java
-------------------------
package com.ihub.www.repo;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import com.ihub.www.model.Department;

@Repository
public interface DepartmentRepository extends JpaRepository<Department, Long>
{

}

step22:
------
	Create a ResourceNotFoundException.java file inside "com.ihub.www.exception" package.

ResourceNotFoundException.java
------------------------------
package com.ihub.www.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends RuntimeException
{
	private static final long serialVersionUID = 1L;

	public ResourceNotFoundException(String msg)
	{
		super(msg);
	}
}

step23:
------
	Create a employee_management_system schema in mysql database and use that schema.
	ex:
		create schema employee_management_system;
		use employee_management_system;

step24:
------
	Configure server port, database properties and hibernate properties inside application.properties file.

application.properties 
-----------------------
server.port= 9191

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/employee_management_system
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto= update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format-sql=true

step25:
------
	Create a EmployeeService inside "com.ihub.www.service" package.

EmployeeService.java
---------------------
package com.ihub.www.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ihub.www.model.Employee;
import com.ihub.www.repo.EmployeeRepository;

@Service
public class EmployeeService 
{
	@Autowired
	EmployeeRepository employeeRepository;
	
	public Employee addEmployee(Employee employee)
	{
		return employeeRepository.save(employee);
	}
}

step26:
------
	Create a EmployeeController inside "com.ihub.www.controller" package.

EmployeeController.java
------------------------
package com.ihub.www.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ihub.www.model.Employee;
import com.ihub.www.service.EmployeeService;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/api/v1/")
public class EmployeeController 
{
	@Autowired
	EmployeeService employeeService;
	
	@PostMapping("/employees")
	public Employee addEmployee(@RequestBody Employee employee)
	{
		return employeeService.addEmployee(employee);
	}
}

step27:
------
	Run spring boot starter project.

step28:
------
	Test the application by using below request url.
	ex:
		HTTP method 			URL 
		-----------			--------
		POST				http://localhost:9191/api/v1/employees
						Body 
							Raw (JSON)
						{
    							"name":"Alan Morries",
    							"doj":"14-05-2025",
   	 						"dept":{
        							"deptName":"IT",
        							"designation":"Developer"
    								}
						}

step29:
-------
	Create "Add Employee" button inside "EmployeeListComponent.js" file.

EmployeeListComponent.js 
------------------------

import { useState } from "react";
import { useTypewriter,Cursor} from 'react-simple-typewriter'
import {Link} from 'react-router-dom';

function EmployeeListComponent()
{
    const [text] = useTypewriter({
        words:["Details","Info","List"],
        loop:true,
        typeSpeed:120,
        deleteSpeed:80
    })

    const [employees,setEmployees]=useState([]);
    
    return(
         <div className="container mt-5">
            <h4 className="text-center"> Employee {text}<Cursor/> </h4>
            <div className="row mt-5">
        <Link to="/add-emp" className="btn btn-warning w-25 mb-2"> Add Employee </Link>            
                <table className="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Name</th>
                            <th>DOJ</th>
                            <th>Department</th>
                            <th>Designation</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            employees.map(employee =>{
                                return <tr key={employee.id}>
                                            <td>{employee.id}</td>
                                            <td>{employee.name}</td>
                                            <td>{employee.doj}</td>
                                            <td>{employee.dept.deptName}</td>
                                            <td>{employee.dept.designation}</td>
                                        </tr>
                            })
                        }
                    </tbody>
                </table>
            </div>
         </div>   
    )
}
export default EmployeeListComponent;

step30:
------
	Create a CreateEmployeeComponent.js file inside "components" folder.

CreateEmployeeComponent.js
---------------------------
function CreateEmployeeComponent()
{
    return (
        <h1> Create Employee Component </h1>
    )
}
export default CreateEmployeeComponent;

step31:
-------
	Add routing to CreateEmployeeComponent.js file inside routing file.

App.js 
-------
import EmployeeListComponent from "./components/EmployeeListComponent";
import FooterComponent from "./components/FooterComponent";
import HeaderComponent from "./components/HeaderComponent";
import './App.css';
import {BrowserRouter,Routes,Route} from 'react-router-dom';
import CreateEmployeeComponent from "./components/CreateEmployeeComponent";

function App()
{
  return (
      <div className="bg-color">
          <HeaderComponent/>

          <BrowserRouter>
             <div className="container mt-5">
              <Routes>
                  <Route exact path="/" element={<EmployeeListComponent/>}></Route>
                  <Route path="/employees" element={<EmployeeListComponent/>}></Route>
                  <Route path="/add-emp" element={<CreateEmployeeComponent/>}></Route>
              </Routes>
              </div> 
          </BrowserRouter>
          
          <FooterComponent/>
      </div>
  )
}
export default App;

step32:
-----
	Create a services folder inside "src" folder.

step33:
------
	Create a EmployeeService.js file inside "services" folder.

EmployeeService.js 
------------------

import axios from 'axios';
const EMPLOYEE_API="http://localhost:9191/api/v1/employees";

class EmployeeService
{
    addEmployee(employee)
    {
        return axios.post(EMPLOYEE_API,employee);
    }
}
export default new EmployeeService();




















